---
title: Gaming Library
summary: Dang, I've played a lot of games, eh?
permalink: /games/library/
section: games
heroCta: [{ label: "/games", url: "/games" }]
platformLabels: {
    'PS5': 'PlayStation 5',
    'PS4': 'PlayStation 4',
    'PS3': 'PlayStation 3',
    'PS2': 'PlayStation 2',
    'PS1': 'PlayStation',
    'PSV': 'PS Vita',
    'PSP': 'PlayStation Portable',
    'Dreamcast': 'Dreamcast'
}
---

{% renderTemplate "md" %}Drawing _a little_ inspiration from [Robb Knight's list](https://rknight.me/collections/games/) (although I took the easy route with the spines instead of cover art…), here's my (mostly accurate) collection of video games (many of which are collecting something of their own: dust!).{% endrenderTemplate %}

<hr>

<div class="grouper grouper--toolbar" data-formlike>
    <button type="button" class="button" data-games-toggled>
        <span aria-hidden="true"></span>
        Toggle All
    </button>
    
    <div>
        <label for="spine-sizing" class="fontWeight-bold">Size:</label>
        <select id="spine-sizing" data-games-sizing>
            <option value="sm">Smaller</option>
            <option value="md" selected>Standard</option>
            <option value="lg">Larger</option>
        </select>
    </div>
</div>

{# {% set glyphList = '' %} #}
{% for platform, games in gamescollection | groupby('platform') | dictsort | sortentries(platformLabels | keys) %}
    {% set platformSlug = platform | lower | replace(' ', '-') %}
    {% setAsync "expanderLabel" %}
        {% svg 'gaming-'+platformSlug, { class: 'gaming-logo inline-icon inline-icon--middle' } %}
        {{ platformLabels[platform] }} ({{ games | length }})
    {% endsetAsync %}
    {% expander expanderLabel %}
        <ul class="gaming-platform-group" data-gaming-platform="{{ platformSlug }}">
            {% for game in games | sort(false, false, 'sortTitle') %}
                <li
                    class="gaming-spine"
                    {% if game.edition in ['Essentials', 'Platinum'] %}data-gaming-edition="{{ game.edition | lower | replace(' ', '-') }}"{% endif %}
                    {% if platformSlug == 'ps3' %}data-gaming-branding="{{ 'old' if game.year < 2009 else 'new' }}"{% endif %}
                    data-game="{{ game | dump | escape }}"
                >
                    {# {% set glyphList = [glyphList, game.title] | join %} #}
                    <div class="gaming-spine-paper">
                        <div class="gaming-spine-top">
                            {% if platformSlug == 'ps3' %}
                                {% if game.year < 2009 %}
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        xmlns:xlink="http://www.w3.org/1999/xlink"
                                        width="32"
                                        height="32"
                                        viewBox="0 0 32 32"
                                        class="gaming-spine-logo"
                                        aria-hidden="true"
                                    ><use xlink:href="#gaming-old-{{ platformSlug }}-logo" width="32" height="32"></use></svg>
                                {% else %}
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        xmlns:xlink="http://www.w3.org/1999/xlink"
                                        width="32"
                                        height="64"
                                        viewBox="0 0 32 64"
                                        class="gaming-spine-logo"
                                        aria-hidden="true"
                                    ><use xlink:href="#gaming-new-{{ platformSlug }}-logo" width="32" height="64"></use></svg>
                                {% endif %}
                            {% elseif platformSlug == 'psv' %}
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    xmlns:xlink="http://www.w3.org/1999/xlink"
                                    width="32"
                                    height="80"
                                    viewBox="0 0 32 80"
                                    class="gaming-spine-logo-extra"
                                    aria-hidden="true"
                                ><use xlink:href="#gaming-vertical-{{ platformSlug }}-logo"></use></svg>
                            {% else %}
                                {% set displayLogo = 'ps1' if (platformSlug in ['ps2', 'psp']) else platformSlug %}
                                {% if platformSlug in ['ps4', 'ps5'] %}{% set displayLogo = 'solid-ps1' %}{% endif %}
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    xmlns:xlink="http://www.w3.org/1999/xlink"
                                    width="32"
                                    height="32"
                                    viewBox="0 0 32 32"
                                    class="gaming-spine-logo"
                                    aria-hidden="true"
                                ><use xlink:href="#gaming-{{ displayLogo }}-logo" width="32" height="32"></use></svg>
                                {% if platformSlug in ['ps2'] %}
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        xmlns:xlink="http://www.w3.org/1999/xlink"
                                        width="32"
                                        height="154.4"
                                        viewBox="0 0 32 154.4"
                                        class="gaming-spine-logo-extra"
                                        aria-hidden="true"
                                    ><use xlink:href="#gaming-vertical-{{ platformSlug }}-logo"></use></svg>
                                {% elseif platformSlug in ['ps4', 'ps5', 'psp'] %}
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        xmlns:xlink="http://www.w3.org/1999/xlink"
                                        width="32"
                                        height="64"
                                        viewBox="0 0 32 64"
                                        class="gaming-spine-logo-extra"
                                        aria-hidden="true"
                                    ><use xlink:href="#gaming-vertical-{{ platformSlug }}-logo"></use></svg>
                                {% endif %}
                            {% endif %}
                        </div>
                        <div class="gaming-spine-label" style="--spine-title-scale: {{ game.title | sizeFactor }}"><span>{{ game.title | replace("'", '’') }}</span></div>
                        {# {% if game.year %} ({{ game.year }}){% endif %} #}
                        {# {% if game.edition and game.edition != game.title %}— {{ game.edition }}{% endif %} #}
                        {# {% if (game.subItems | length) > 0 %} (includes {{ game.subItems | length }} games){% endif %} #}
                    </div>
                </li>
            {% endfor %}
        </ul>
    {% endexpander %}
{% endfor %}
{# <textarea>{{ glyphList.split('') | unique | join }}</textarea> #}

{% svg 'no-disc', { class: 'visually-hidden' } %}
<template id="gaming-details-dialog-template">
    <div class="gaming-details-dialog-content">
        {% component "cta", {
            icon: 'close',
            label: { aria: 'Close' },
            ctaClass: 'gaming-details-dialog-close',
            ctaAttr: 'data-hide-game-info'
        } %}
        <div class="flow" style="--flow-space: var(--size-s);">
            <h2>
                <span data-slot="title"></span>
                <span data-slot="year" class="font-reset fontSize-small" hidden></span>
            </h2>

            <p data-slot="edition" class="fontStyle-italic" style="--flow-space: var(--size-2xs);" hidden></p>
            <p>
                <strong>Region:</strong>
                <span data-slot="region"></span>
            </p>
            
            <p>
                <strong>Platform:</strong>
                <span data-slot="platform"></span>
                (<span data-slot="format"></span>)
            </p>
            <p data-slot="subItems" hidden></p>
        </div>
    </div>
</template>
<dialog id="gaming-details-dialog" class="gaming-details-dialog"></dialog>

{% js "foot-gamescollection" %}
const eachDom = (s, fn) => Array.from(document.querySelectorAll(s)).forEach(fn);
document.addEventListener('DOMContentLoaded', function(e) {
    eachDom('.gaming-spine-label', (spine) => {
        const button = document.createElement('button')
        spine.getAttributeNames().forEach(attr => button.setAttribute(attr, spine.getAttribute(attr)));
        button.type = 'button';
        button.classList.add('button-reset');
        button.innerHTML = spine.innerHTML;
        spine.replaceWith(button);
    });
});
document.addEventListener('click', function(e) {
    let target;
    if ((target = e.target.closest('[data-games-toggled]'))) {
        target.dataset.gamesToggled = String(target.dataset.gamesToggled !== 'true');
        eachDom('details', (d) => d.open = target.dataset.gamesToggled === 'true');
    } else if ((target = e.target.closest('.gaming-spine-label'))) {
        const gameData = JSON.parse(target.closest('[data-game]').getAttribute('data-game'));
        const dialog = document.getElementById('gaming-details-dialog');
        const template = document.getElementById('gaming-details-dialog-template');
        const clone = template.content.cloneNode(true);
        
        clone.querySelector('[data-slot="title"]').innerText = gameData.title;

        clone.querySelector('[data-slot="year"]').hidden = !gameData.year;
        clone.querySelector('[data-slot="year"]').innerText = '('+gameData.year+')';
        
        clone.querySelector('[data-slot="edition"]').hidden = !gameData.edition;
        clone.querySelector('[data-slot="edition"]').innerText = gameData.edition;

        clone.querySelector('[data-slot="region"]').innerText = gameData.region;

        clone.querySelector('[data-slot="platform"]').innerText = gameData.platform;
        clone.querySelector('[data-slot="format"]').innerText = !gameData.discs ? 'digital' : (gameData.discs > 1 ? `${gameData.discs} discs` : 'disc');

        clone.querySelector('[data-slot="subItems"]').hidden = gameData.subItems.length === 0;
        clone.querySelector('[data-slot="subItems"]').innerText = gameData.subItems ? `Includes ${gameData.subItems.length} games` : '';

        Array.from(dialog.childNodes).forEach(el => el.remove());
        dialog.append(clone);
        try {
            dialog.showModal();
        } catch (error) {
            dialog.setAttribute('open','');
        }
    } else if ((target = e.target.closest('[data-hide-game-info]'))) {
        try {
            target.closest('dialog').close();
        } catch (error) {
            dialog.removeAttribute('open');
        }
    }
});
document.addEventListener('change', function(e) {
    const select = e.target.closest('[data-games-sizing]');
    if (!select) { return; }
    const selectedValue = select.value || 'md';
    const sizeMap = { sm: '0.75em', md: '1em', lg: '1.25em' };
    eachDom('[data-gaming-platform]', (g) => g.style.fontSize = sizeMap[selectedValue]);
});
{% endjs %}