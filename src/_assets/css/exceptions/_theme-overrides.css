@media (--prefers-light) {
	html:not([data-theme]) {
		.homepage-photo {
			--HOME-photo-border-width: 0px;
			border-radius: var(--size-2xs);
		}
	}
}

html[data-theme='dawn'] {
	.homepage-photo {
		--HOME-photo-border-width: 0px;
		border-radius: var(--size-2xs);
	}
}

@media (--prefers-dark) {
	html:not([data-theme]) {
		.homepage-logo {
			--HOME-logo-name-color: var(--C-accent);
		}

		.callout {
			padding: 0 0 var(--CALLOUT-padding) var(--CALLOUT-padding);
			border-width: 0 0 0 var(--CALLOUT-border-width);
			background: linear-gradient(90deg, transparent, var(--C-canvas)) repeat-y 100% 0,
				repeating-linear-gradient(var(--C-accent) 0, var(--C-accent) 2px, transparent 2px, transparent 6px) repeat-x 0 0 / 100% 1em,
				linear-gradient(90deg, var(--C-accent), var(--C-canvas)) no-repeat 0 100% / 100% 0.11em;
		}

		.callout-label {
			position: relative;
			inset-block-start: -0.125em; /* Cancel vertical offset caused by padding */
			inset-inline-start: -0.325em; /* Cancel horizontal offset caused by padding */

			inline-size: fit-content;
			max-inline-size: 100%;
			margin-block-end: -0.125em; /* Cancel vertical offset caused by padding */
			padding: 0.125em 0.325em calc(0.125em + var(--size-xs)); /* Extra bottom padding matching the default margin-block-end to extend the BG color */

			line-height: 0.675; /* ! MAGIC NUMBER but I really need text-box: cap alphabetic :( */
			color: var(--C-text);
			text-shadow: 2px 2px 0 var(--C-canvas), 4px 4px 0 var(--C-accent);
			background-color: var(--C-canvas);

			&::before {
				position: static;

				display: inline;
				aspect-ratio: initial;
				padding: 0 0.5ch 0 0;

				text-shadow: none;
				vertical-align: middle;
				border: 0;
				background: none;

				translate: 0;
			}
		}

		:is(.codeblock, .codeview) {
			--CODEBLOCK-border-color: var(--C-heading);
		}

		.codeblock pre {
			box-shadow: inset 0 0 1em -0.5em var(--CODEBLOCK-border-color);
		}

		hr {
			position: relative;
			overflow: visible;

			block-size: 3px;

			background: radial-gradient(farthest-side, white, var(--C-accent), transparent);
			filter: drop-shadow(0 0 4px var(--C-accent));

			&::after {
				content: '';

				position: absolute;
				inset: 0;

				block-size: 2rem;
				inline-size: 2rem;
				margin: auto;

				background: linear-gradient(white, #fff29b, pink) no-repeat 50% 0 / 100% 50%,
					repeating-linear-gradient(transparent 0, transparent 2px, hotpink 0, hotpink 4px) no-repeat 50% 100% / 100% 100%;
				border-radius: 50%;
			}
		}
	}
}

html[data-theme='dusk'] {
	.homepage-logo {
		--HOME-logo-name-color: var(--C-accent);
	}

	.callout {
		padding: 0 0 var(--CALLOUT-padding) var(--CALLOUT-padding);
		border-width: 0 0 0 var(--CALLOUT-border-width);
		background: linear-gradient(90deg, transparent, var(--C-canvas)) repeat-y 100% 0,
			repeating-linear-gradient(var(--C-accent) 0, var(--C-accent) 2px, transparent 2px, transparent 6px) repeat-x 0 0 / 100% 1em,
			linear-gradient(90deg, var(--C-accent), var(--C-canvas)) no-repeat 0 100% / 100% var(--CALLOUT-border-width);
	}

	.callout-label {
		position: relative;
		inset-block-start: -0.125em; /* Cancel vertical offset caused by padding */
		inset-inline-start: -0.325em; /* Cancel horizontal offset caused by padding */

		inline-size: fit-content;
		max-inline-size: 100%;
		margin-block-end: -0.125em; /* Cancel vertical offset caused by padding */
		padding: 0.125em 0.325em calc(0.125em + var(--size-xs)); /* Extra bottom padding matching the default margin-block-end to extend the BG color */

		line-height: 0.675; /* ! MAGIC NUMBER but I really need text-box: cap alphabetic :( */
		color: var(--C-text);
		text-shadow: 2px 2px 0 var(--C-canvas), 4px 4px 0 var(--C-accent);
		background-color: var(--C-canvas);

		&::before {
			position: static;

			display: inline;
			aspect-ratio: initial;
			padding: 0 0.5ch 0 0;

			text-shadow: none;
			vertical-align: middle;
			border: 0;
			background: none;

			translate: 0;
		}
	}

	:is(.codeblock, .codeview) {
		--CODEBLOCK-border-color: var(--C-heading);
	}

	.codeblock pre {
		box-shadow: inset 0 0 1em -0.5em var(--CODEBLOCK-border-color);
	}

	hr {
		position: relative;
		overflow: visible;

		block-size: 3px;

		background: radial-gradient(farthest-side, white, var(--C-accent), transparent);
		filter: drop-shadow(0 0 4px var(--C-accent));

		&::after {
			content: '';

			position: absolute;
			inset: 0;

			block-size: 2rem;
			inline-size: 2rem;
			margin: auto;

			background: linear-gradient(white, #fff29b, pink) no-repeat 50% 0 / 100% 50%,
				repeating-linear-gradient(transparent 0, transparent 2px, hotpink 0, hotpink 4px) no-repeat 50% 100% / 100% 100%;
			border-radius: 50%;
		}
	}
}

html[data-theme='vapor'] {
	.hero-heading {
		color: var(--C-accent);
	}

	.homepage-logo {
		--HOME-logo-name-color: var(--C-accent);
		--HOME-logo-text-font: var(--fontStack-monospace);
		--HOME-logo-text-scaling: 0.8;
	}

	.homepage-photo {
		/* CRT screen, kinda */
		--crt-size: 400%;
		--crt-bg: #460327;
		--crt-frame: #d5cfca;
		--crt-mask: black 49%, transparent 49.5%;

		border: 12px solid #d5cfca;
		border-radius: 12px;
		background: var(--crt-frame);
		box-shadow: 0 3px 0 #bbafa4, 0 20px 0 -6px #a59a8f;
		transform: translateY(-4px);

		& > img {
			aspect-ratio: 4/3;
			border-radius: 0;
			object-fit: cover;
			object-position: 50% 5%;
			mask-image: radial-gradient(var(--crt-size) 100%, var(--crt-mask)), radial-gradient(100% var(--crt-size), var(--crt-mask));
			mask-composite: intersect;
		}

		@supports (corner-shape: bevel) {
			corner-shape: squircle;

			& > img {
				corner-shape: superellipse(2);
				border-radius: 30px;
			}
		}
	}

	.expander-content {
		box-shadow: 0 4px 0 -2px var(--C-heading);
	}

	& :not(pre) > code {
		--CODE-bg: var(--C-surface-alt);
	}

	:is(.codeblock-toolbar-label, .codeview-toolbar) {
		color: var(--C-surface-alt);
	}

	hr {
		block-size: 4px;
		mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' height='4'%3E%3Cdefs%3E%3Cpattern id='wave' width='15' height='4' patternUnits='userSpaceOnUse'%3E%3Cpath fill='none' stroke='black' d='M0 1c3.8 0 3.8 2 7.6 2s3.8-2 7.6-2'/%3E%3C/pattern%3E%3C/defs%3E%3Crect width='100%25' height='4' fill='url(%23wave)'/%3E%3C/svg%3E")
			repeat-x center;
		background: var(--C-accent);
	}
}

html[data-theme='quill'] {
	.homepage-logo {
		--HOME-logo-name-color: var(--C-accent);
	}

	.expander-content {
		--CODE-bg: var(--C-canvas);
	}

	.image-gallery > figure > figcaption {
		background-color: var(--C-surface);
	}

	hr {
		position: relative;
		overflow: visible;

		block-size: 1px;

		background: var(--C-text);

		&::after {
			content: '';

			position: absolute;
			inset: 0;

			block-size: 2rem;
			inline-size: 2rem;
			margin: auto;

			background: inherit;
			mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='221.8' height='493.3' viewBox='0 0 221.8 493.3'%3E%3Cpath d='M18 46s14-14 28-20 21-16 45-16 43 15 58 30c0 13 6 22 12 32 0 0 24 6 30 69 0 0 21 6 3 109s-27 80-27 80 5 78 12 109-2 38-26 22c0 0-37 32-34-17s0-146-24-177c0 0-40-45-47-88s-12-59 13-97c0 0-5-20-8-24S31 44 24 44l-6 2Z'/%3E%3C/svg%3E%0A")
				no-repeat center / auto 100%;
		}
	}
}

html[data-theme='cyberpunk'] {
	--cut-size: clamp(0.25rem, 0.375em, 0.75rem);

	.homepage-logo {
		--HOME-logo-name-color: var(--C-accent);
		--HOME-logo-text-transform: uppercase;
		--HOME-logo-text-style: normal;
		--HOME-logo-text-scaling: 0.8;
	}

	.homepage-photo::before {
		--i: 18px; /* Inset amount */
		--s: 2px; /* Pattern size */
		--f: 3; /* Pattern scaling factor */

		content: '';

		position: absolute;
		inset: var(--i);
		z-index: -1;

		border: var(--HOME-photo-border-width) solid var(--C-heading);
		background: conic-gradient(from -90deg, var(--C-heading) 90deg, transparent 0) repeat calc(50% + var(--s) / var(--f)) calc(50% + var(--s) / var(--f)) / var(--s) var(--s);

		mask: radial-gradient(circle at 50% 50%, transparent calc(100% - var(--i) * 2), #0008 0) no-repeat center / calc(100% + 2 * var(--i)) calc(100% + 2 * var(--i));
	}

	& .button:not(.button--tag) {
		@supports not (corner-shape: bevel) {
			&:not([data-shape='rect']) {
				&:is(:hover, :focus-visible) {
					&::before {
						box-shadow: var(--_cta-box-shadow-active);
					}
				}

				position: relative;
				isolation: isolate; /* Remove from global stacking context (so the ::before pseudo can use z-index:-1 without going below parent elements) */

				border-color: transparent;
				background: none;
				box-shadow: none;

				&::before {
					--inset: calc(var(--_cta-border-width) * -0.99);
					content: '';

					position: absolute;
					inset-block: var(--inset); /* Not using -1 so subpixel values can avoid being cut off */
					inset-inline: calc(
						var(--inset) - 1px
					); /* Taking up an extra pixel on each side so the first background image can create the left border effect without offsetting the contents */
					z-index: -1;

					clip-path: polygon(0 0, 100% 0, 100% calc(100% - var(--cut-size)), calc(100% - var(--cut-size)) 100%, 0 100%);

					border: var(--_cta-border-width) solid currentColor;
					border-radius: var(--_cta-border-radius);

					/* By setting the border color as our color, we can leverage currentColor which will transition when used in a gradient definition */
					color: var(--CTA-border-color);
					background: linear-gradient(90deg, currentColor 1px, transparent 0) repeat-y 0 0 / 100% 100%,
						linear-gradient(90deg, currentColor 2px, transparent 0) no-repeat 0 0 / 2px 30%,
						linear-gradient(90deg, currentColor 2px, transparent 0) no-repeat 0 100% / 2px 30%,
						linear-gradient(135deg, transparent calc(50% - 0.2px), currentColor calc(50% + 0.2px)) no-repeat 100% 100% / var(--cut-size) var(--cut-size);
					background-color: var(--CTA-bg-color);

					transition: inherit;
				}

				&[data-shape='flipped'] {
					&::before {
						transform: scaleX(-1); /* Make the cut sit at the bottom-left instead */
					}
				}
			}
		}

		@supports (corner-shape: bevel) {
			corner-shape: bevel;
			border-end-end-radius: var(--cut-size);
			background: linear-gradient(0deg, var(--CTA-border-color) 33%, transparent 0, transparent 67%, var(--CTA-border-color) 0) no-repeat 0 0 / 2px 100%,
				conic-gradient(var(--CTA-border-color) 0 0) no-repeat 0 0 / 1px 100%;
			background-color: var(--CTA-bg-color);

			&[data-shape='flipped'] {
				border-end-end-radius: 0;
				border-end-start-radius: var(--cut-size);
				background-position: 100% 0;
			}

			&[data-shape='rect'] {
				border-radius: 0;
				background: linear-gradient(0deg, var(--CTA-border-color) 33%, transparent 0, transparent 67%, var(--CTA-border-color) 0) no-repeat 0 0 / 2px 100%,
					linear-gradient(0deg, var(--CTA-border-color) 33%, transparent 0, transparent 67%, var(--CTA-border-color) 0) no-repeat 100% 0 / 2px 100%,
					conic-gradient(var(--CTA-border-color) 0 0) no-repeat 0 0 / 1px 100%, conic-gradient(var(--CTA-border-color) 0 0) no-repeat 100% 0 / 1px 100%;
				background-color: var(--CTA-bg-color);
			}
		}

		&:is(:hover, :focus-visible) {
			filter: drop-shadow(0 0 0.5em color-mix(in hsl, var(--C-heading), transparent));

			@media (--accept-motion) {
				animation: cyberpunkCta 200ms steps(3, jump-none) 1;
			}
		}
	}

	.button--tag {
		--CTA-border-radius: 4px;
		--CTA-text-color: #edb238;
		--CTA-bg-color: #0f0d17;
		--CTA-border-color: #edb238;
		--CTA-box-shadow: none;

		&:is(:hover, :focus-visible) {
			--CTA-text-color: var(--C-accent);
			--CTA-bg-color: var(--C-surface);
			--CTA-border-color: var(--C-accent);
			--CTA-box-shadow: 0 0 1em color-mix(in hsl, var(--C-accent), transparent);
		}

		font-family: var(--_font-heading-family);
	}

	.hero-heading {
		text-transform: uppercase;
	}

	hr {
		--s: 12px;
		--g1: var(--C-accent-alt) 50%, transparent 0;
		--g2: transparent 25%, var(--C-accent-alt) calc(25% + 0.5px), var(--C-accent-alt) calc(75% - 0.5px), transparent 75%;

		block-size: var(--s);

		background: linear-gradient(180deg, var(--g1)) 0 0 / 33.3% 100%, linear-gradient(60deg, var(--g2)) 33.3% 0 / calc(var(--s) * 0.75) var(--s),
			linear-gradient(0deg, var(--g1)) 50% 0 / calc(33.4% - var(--s) / 2) 100%, linear-gradient(-60deg, var(--g2)) 66.7% 0 / calc(var(--s) * 0.75) var(--s),
			linear-gradient(180deg, var(--g1)) 100% 0 / 33.3% 100%;
		background-repeat: no-repeat;
		clip-path: polygon(0 50%, calc(var(--s) / 3) 0, calc(100% - (var(--s) / 3)) 0, 100% 50%, 100% 100%, 0 100%);
	}

	.announcement {
		clip-path: polygon(0 50%, 0 0, 100% 0, 100% 50%, calc(100% - 1em) 100%, 1em 100%);

		& :any-link {
			--LINK-color: var(--C-canvas);
		}
	}
}

@keyframes cyberpunkCta {
	/*
	<svg xmlns='http://www.w3.org/2000/svg' width='0' height='0'>
		<defs>
			<filter id='dist'>
				<feTile x='0%' result='fx1' width='100%' height='30%' y='35%'></feTile>
				<feOffset in='fx1' result='fx2' dy='25%' dx='-12'>
					<animate attributeName='dx' values='-4;-12' dur='0.2s' repeatCount='indefinite' />
				</feOffset>
				<feTurbulence type='fractalNoise' baseFrequency='0 0.15' numOctaves='2' seed='2' stitchTiles='stitch' result='fx3'>
					<animate attributeName='seed' values='1;4' dur='0.2s' repeatCount='indefinite' />
				</feTurbulence>
				<feComposite in='fx2' operator='atop' result='fx4' in2='SourceGraphic'></feComposite>
				<feDisplacementMap in='fx4' in2='fx3' scale='16' xChannelSelector='A' yChannelSelector='A'></feDisplacementMap>
			</filter>
		</defs>
	</svg>
	*/
	0%,
	33% {
		filter: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='0' height='0'%3E%3Cdefs%3E%3Cfilter id='dist'%3E%3CfeTile x='0%25' result='fx1' width='100%25' height='30%25' y='35%25'%3E%3C/feTile%3E%3CfeOffset in='fx1' result='fx2' dy='25%25' dx='-12'%3E%3Canimate attributeName='dx' values='-4;-12' dur='0.2s' repeatCount='indefinite' /%3E%3C/feOffset%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0 0.15' numOctaves='2' seed='2' stitchTiles='stitch' result='fx3'%3E%3Canimate attributeName='seed' values='1;4' dur='0.2s' repeatCount='indefinite' /%3E%3C/feTurbulence%3E%3CfeComposite in='fx2' operator='atop' result='fx4' in2='SourceGraphic'%3E%3C/feComposite%3E%3CfeDisplacementMap in='fx4' in2='fx3' scale='16' xChannelSelector='A' yChannelSelector='A'%3E%3C/feDisplacementMap%3E%3C/filter%3E%3C/defs%3E%3C/svg%3E#dist");
	}
}

html[data-theme='vintage'] {
	.homepage-logo {
		--HOME-logo-text-transform: uppercase;
		--HOME-logo-text-scaling: 0.75;
	}

	.homepage-photo {
		--HOME-photo-border-width: 0px;
		border-radius: var(--size-m);
		background: var(--C-heading);
	}

	hr {
		block-size: 1rem;

		border-radius: 2px;
		background: linear-gradient(90deg, goldenrod, gold 33%, goldenrod) no-repeat 50% 75% / 100% 0.125rem, linear-gradient(var(--C-heading) 75%, var(--C-text) 0);
	}

	@media (--small-viewport) {
		.header-link {
			--LINK-color: var(--C-accent);

			&:is(:hover, :focus-visible) {
				--LINK-color: var(--C-heading);
			}
		}
	}

	.button:is(:active) {
		--CTA-box-shadow: 0 1px 1px #0003, inset 0 -2px 2px #954a4a, inset 0 2px 2px var(--C-accent);
	}

	.card a:is(:hover, :focus-visible) {
		--LINK-color: var(--C-surface-alt);
		--LINK-underline-color: var(--C-heading);
	}

	.signoff :any-link {
		--LINK-color: var(--C-surface-alt);
		--LINK-underline-color: var(--C-canvas);

		&:is(:hover, :focus-visible) {
			--LINK-color: var(--C-canvas);
			--LINK-underline-color: var(--C-heading);
		}
	}

	.announcement {
		background-color: var(--C-text);
		box-shadow: inset 0 1px 0 var(--C-surface-alt);
	}
}

html[data-theme='campfire'] {
	@supports (-webkit-background-clip: text) or (background-clip: text) {
		.hero-heading {
			--bleed: 4px;

			margin: calc(var(--bleed) * -1);
			padding: var(--bleed);

			color: transparent;
			background: linear-gradient(135deg, var(--C-heading) 33%, var(--C-accent) 125%);
			-webkit-background-clip: text;
			background-clip: text;

			filter: drop-shadow(-0.5px -1px 0 var(--C-text));
		}
	}

	.homepage-logo {
		--HOME-logo-text-font: var(--_font-body-family);
	}

	.homepage-photo {
		--HOME-photo-border-width: 0px;
		border-radius: 100% 100% var(--size-xs) var(--size-xs) / 30% 30% var(--size-xs) var(--size-xs);
	}

	hr {
		block-size: 0.75rem;

		/* background: linear-gradient(#908158 25%, #d2b123 0 50%, #cc711d 0 75%, #6d1b28 0) repeat-x 0 0 / 100% 100%;
		background: linear-gradient(#BCAE80 25%, #ECD738 0 50%, #E99D2F 0 75%, #992C40 0) repeat-x 0 0 / 100% 100%; */
		background: linear-gradient(#bcae80 25%, #c4a726 0 50%, #cc711d 0 75%, #6d1b28 0) repeat-x 0 0 / 100% 100%;
	}

	.signoff {
		color: var(--C-canvas);
		border: 1px solid var(--C-text);

		& :any-link:is(:hover, :focus-visible) {
			--LINK-color: var(--C-canvas);
			--LINK-underline-color: var(--C-heading);
		}
	}

	.callout {
		--flow-space: var(--size-xl);
		--callout-border-color: transparent;
		--CALLOUT-nail: #56482d 2px, transparent 3px;
		--CALLOUT-post: max(var(--size-l), var(--flow-space) * 0.8);

		position: relative;

		background-image: radial-gradient(circle at 50% calc((var(--CALLOUT-padding) * 0.75)), var(--CALLOUT-nail)),
			radial-gradient(circle at 50% calc(100% - (var(--CALLOUT-padding) * 0.75)), var(--CALLOUT-nail)),
			linear-gradient(var(--C-heading) calc(var(--CALLOUT-padding) * 0.25), transparent 0);
		background-repeat: no-repeat;
		box-shadow: var(--_shadow);

		&::before {
			content: '';

			position: absolute;
			inset-block: calc(var(--CALLOUT-post) * -1);
			inset-inline: calc(50% - var(--CALLOUT-post) / 2);
			z-index: -1;

			border-radius: 0 0 50% 50% / 0 0 8px 8px;
			background: linear-gradient(hsl(16, 31%, 24%), hsl(16, 31%, 14%)) no-repeat 50% 0 / 100% calc(var(--CALLOUT-post) / 2),
				linear-gradient(90deg, hsl(16, 31%, 24%), hsl(16, 31%, 14%));

			clip-path: polygon(50% 0, 100% calc(var(--CALLOUT-post) / 2), 100% 100%, 0 100%, 0 calc(var(--CALLOUT-post) / 2));
		}
	}

	.callout-label {
		--CALLOUT-border-width: 3px;
		--CALLOUT-border-color: var(--CALLOUT-background);
	}

	.signoff-title {
		color: var(--C-surface);
		text-shadow: none;
	}

	:is(.codeblock, .codeview) {
		--CODEBLOCK-border-color: var(--C-accent-alt);
	}

	.postlist-group-label {
		color: var(--C-accent-alt);
	}
}

html[data-theme='director'] {
	.homepage-logo {
		--HOME-logo-text-transform: uppercase;
		--HOME-logo-text-style: normal;
		--HOME-logo-text-scaling: 0.8;
	}

	.homepage-photo {
		/* Photo frame, kinda */
		--frame-color: #341b14;
		--frame-size: 8px;

		border: var(--frame-size) solid var(--frame-color);
		border-radius: 0;
		background-color: #000;

		transform: translateY(calc(-0.5 * var(--frame-size)));

		/* Fix for Chrome and Safari rendering a very different ridge border color */
		&::before {
			content: '';
			position: absolute;
			inset: calc(-1 * var(--frame-size));

			border: var(--frame-size) ridge #888888;

			mix-blend-mode: overlay;
			filter: brightness(0.7);
		}

		/* Glass reflection effect */
		&::after {
			content: '';

			position: absolute;
			inset: 0;

			background: linear-gradient(130deg, transparent 66%, #fff1 68% 75%, transparent 77% 80%, #fff1 82% 84%, transparent 86%);
		}

		& > img {
			aspect-ratio: 4/5;
			object-fit: cover;
			object-position: 42% 50%;

			border-radius: 0;

			opacity: 0.8;
			filter: grayscale(0.9);
			mix-blend-mode: normal;
		}
	}

	.hero-heading {
		--HERO-title-factor: 2.5;

		margin-block-end: 0.125em; /* Compensate for reduced line-height */

		letter-spacing: -0.05em;
		line-height: 0.8;
		text-transform: uppercase;
	}

	.hero-sub {
		time {
			color: var(--C-accent-alt);
		}
	}

	.callout {
		--callout-color: var(--C-surface-alt);
		--callout-border-color: var(--C-text);
		--callout-background: var(--C-text);
	}

	.signoff {
		color: var(--C-surface-alt);
		border-color: var(--C-text);
		background: var(--C-text);
	}

	.callout,
	.signoff {
		box-shadow: var(--_shadow);
	}

	.callout-label,
	.signoff-title {
		color: var(--C-surface);
	}

	:is(.callout, .signoff) :any-link:is(:hover, :focus-visible) {
		--LINK-color: var(--C-canvas);
		--LINK-underline-color: var(--C-accent);
	}

	:not(pre) > code {
		/* Kind of a black marker "redacted" type of thing, hence the slight angle */
		--CODE-bg: linear-gradient(
			calc(90deg + 4deg * var(--f, 1)),
			transparent 2px,
			var(--C-surface-alt) 3px,
			var(--C-surface-alt) calc(100% - 3px),
			transparent calc(100% - 2px)
		);

		padding-inline: 0.25em;

		&:nth-of-type(2n) {
			--f: -1;
		} /* Invert the angle for every other inline code tag */
	}

	hr {
		--h: 20px;
		--sqrt3: 1.7321;
		--w: calc(var(--h) / var(--sqrt3));
		--c: var(--C-heading);
		--b: var(--C-canvas);
		--s: 0.75;
		--s2: 0.25;
		--g: calc(50% / var(--sqrt3));

		block-size: var(--h);

		background: linear-gradient(90deg, transparent, var(--c) calc(50% - var(--w) * 1.25), transparent 0, transparent calc(50% + var(--w) * 1.25), var(--c) 0, transparent)
				no-repeat 50% 25% / 100% 1px,
			linear-gradient(90deg, transparent 10%, var(--c) calc(50% - var(--w)), transparent 0, transparent calc(50% + var(--w)), var(--c) 0, transparent 90%) no-repeat 50% 50% /
				100% 1px,
			linear-gradient(90deg, transparent, var(--c) calc(50% - var(--w) / 1.25), transparent 0, transparent calc(50% + var(--w) / 1.25), var(--c) 0, transparent) no-repeat 50%
				75% / 100% 1px,
			linear-gradient(-120deg, var(--c) 50%, transparent calc(50% + 0.5px)) no-repeat calc(50% - var(--w) / 2 * var(--s2)) var(--g) / calc(var(--w) * var(--s2))
				calc(100% * var(--s2)),
			linear-gradient(120deg, var(--c) 50%, transparent calc(50% + 0.5px)) no-repeat calc(50% + var(--w) / 2 * var(--s2)) var(--g) / calc(var(--w) * var(--s2))
				calc(100% * var(--s2)),
			linear-gradient(-120deg, var(--b) 50%, transparent calc(50% + 0.5px)) no-repeat calc(50% - var(--w) / 2 * var(--s)) var(--g) / calc(var(--w) * var(--s))
				calc(100% * var(--s)),
			linear-gradient(120deg, var(--b) 50%, transparent calc(50% + 0.5px)) no-repeat calc(50% + var(--w) / 2 * var(--s)) var(--g) / calc(var(--w) * var(--s))
				calc(100% * var(--s)),
			linear-gradient(-120deg, var(--c) 50%, transparent calc(50% + 0.5px)) no-repeat calc(50% - var(--w) / 2) 50% / var(--w) 100%,
			linear-gradient(120deg, var(--c) 50%, transparent calc(50% + 0.5px)) no-repeat calc(50% + var(--w) / 2) 50% / var(--w) 100%;
	}
}

.linecap-auto {
	stroke-linecap: var(--_stroke-linecap, square);
}
