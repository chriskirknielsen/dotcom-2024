:is(:focus-visible, :focus:target):not([tabindex='-1']) {
	outline: var(--_focus-outline);
	outline-offset: var(--_focus-outline-offset);
}

/* Hide focus outline on programmatically-only focusable elements */
[tabindex='-1']:focus-visible {
	outline: 0;
}

@media (--accept-motion) {
	:where(:target:not([tabindex='-1'])) {
		position: relative;
		animation: targetHighlight var(--anim-eternity) var(--easing-out) var(--anim-eternity) backwards 1;
	}

	@keyframes targetHighlight {
		from {
			box-shadow: 0 0 33vmax 67vmax rgba(0, 0, 0, 0.5);
			outline-width: 0.5em;
			outline-offset: calc(var(--_focus-outline-offset) * 4);
		}
	}
}

.visually-hidden,
.skip-link:not(:focus),
.tooltip:not(:hover, :focus-visible, :focus-within) > .tooltip-content {
	position: absolute;
	width: 1px;
	height: 0;
	margin: 0;
	padding: 0;
	overflow: hidden;

	white-space: nowrap;
	border: 0;

	clip: rect(0 0 0 0);
}

.skip-link:focus {
	position: fixed;
	inset-block-start: 1rem;
	inset-inline-start: 1rem;
	z-index: 99;

	display: inline-block;
	padding: var(--size-xs);

	color: var(--C-heading);
	background-color: var(--C-surface);
	outline-color: var(--C-accent);

	/* When a skip-link is added to a specific part of the page and not the entire content */
	&[data-skiplink='local'] {
		position: absolute;
	}
}

.tooltip {
	--sqrt2: 1.4142; /* Not 100% sure about browser support for sqrt() so… playing it safe */
	--TOOLTIP-arrow-size: var(--size-xs);
	--TOOLTIP-offset: var(--_tooltip-offset, var(--size-2xs));
	--TOOLTIP-inset-block: calc(100% + var(--TOOLTIP-arrow-size) + var(--TOOLTIP-offset));

	position: relative;
	display: flex; /* We can't use display:contents as we need the position:relative effect, so flex will ensure the tooltip element wraps around its content nice and snug */

	&[data-tooltip-flow='inline'] {
		display: inline-flex;
	}

	/* Position in the BLOCK then INLINE directions, or both at once (start center, end, center end…) */
	&[data-tooltip-pos^='start'] {
		--TOOLTIP-block: auto var(--TOOLTIP-inset-block);
		--TOOLTIP-arrow-y: 50%;
		--TOOLTIP-arrow-margin-block: auto 0;
		--TOOLTIP-origin-y: calc(100% + var(--sqrt2) * var(--TOOLTIP-arrow-size));
	}
	&[data-tooltip-pos^='end'] {
		--TOOLTIP-block: var(--TOOLTIP-inset-block) auto;
		--TOOLTIP-arrow-y: -50%;
		--TOOLTIP-arrow-margin-block: 0 auto;
		--TOOLTIP-origin-y: calc(0% - var(--sqrt2) * var(--TOOLTIP-arrow-size));
	}
	/* &[data-tooltip-pos^='center'] {
		--TOOLTIP-block: 50% auto;
		--TOOLTIP-translate-y: -50%;
		--TOOLTIP-arrow-margin-block: auto;
		--TOOLTIP-origin-y: 50%;
	} */

	/* &[data-tooltip-pos$='start'] {
		--TOOLTIP-inline: 0 auto;
		--TOOLTIP-arrow-x: 100%;
		--TOOLTIP-arrow-margin-inline: 0 auto;
		--TOOLTIP-origin-x: calc(0% + var(--sqrt2) * var(--TOOLTIP-arrow-size));
	} */
	&[data-tooltip-pos$='end'] {
		--TOOLTIP-inline: auto 0;
		--TOOLTIP-arrow-x: -100%;
		--TOOLTIP-arrow-margin-inline: auto 0;
		--TOOLTIP-origin-x: calc(100% - var(--sqrt2) * var(--TOOLTIP-arrow-size));
	}
	&[data-tooltip-pos$='center'] {
		--TOOLTIP-inline: 50%;
		--TOOLTIP-translate-x: -50%;
		--TOOLTIP-arrow-margin-inline: auto;
		--TOOLTIP-origin-x: 0%; /* Due to the translateX(-50%) above, the center is actually at 0% before the transform */
	}

	/* &[data-tooltip-pos='center start'] {
		--TOOLTIP-inline: auto calc(100% + var(--TOOLTIP-arrow-size) + var(--TOOLTIP-offset));
		--TOOLTIP-arrow-margin-inline: auto 0;
		--TOOLTIP-arrow-x: 50%;
	}
	&[data-tooltip-pos='center end'] {
		--TOOLTIP-inline: calc(100% + var(--TOOLTIP-arrow-size) + var(--TOOLTIP-offset)) auto;
		--TOOLTIP-arrow-margin-inline: 0 auto;
		--TOOLTIP-arrow-x: -50%;
	} */

	& > .tooltip-content {
		&,
		&::before {
			pointer-events: none; /* Prevents hiding other content below the tooltip */

			position: absolute;

			display: block;
			margin: auto;

			color: var(--C-surface);
			background-color: var(--C-text);
		}
	}

	@media (--accept-motion) {
		&:is(:hover, :focus-visible, :focus-within) > .tooltip-content {
			animation: fadeIn var(--easing-in-out) calc(200ms * var(--anim-f)), scaleUp var(--easing-in-out) calc(200ms * var(--anim-f));
			transform-origin: var(--TOOLTIP-origin-x) var(--TOOLTIP-origin-y);

			/* &,
			&::before {
				transition: transform var(--easing-in-out) calc(200ms * var(--anim-f));
			} */
		}
	}

	& > .tooltip-content {
		z-index: 2;
		inset-block: var(--TOOLTIP-block);
		inset-inline: var(--TOOLTIP-inline, 0 auto);

		block-size: auto;
		inline-size: auto;
		inline-size: max-content;
		max-inline-size: 20ch;

		font-size: 0.75rem;
		line-height: 1.6;
		font-family: var(--_font-body-family);
		text-align: center;
		border-radius: var(--_corner);
		white-space: wrap;

		transform: translate(var(--TOOLTIP-translate-x, 0%), var(--TOOLTIP-translate-y, 0%));

		/* Only if the contents aren't a singular image do we want inline padding */
		&:not(:has(img:only-child)) {
			padding-inline: var(--size-2xs);
		}

		&::before {
			content: '';

			inset: 0;
			z-index: -1;

			block-size: var(--TOOLTIP-arrow-size);
			inline-size: var(--TOOLTIP-arrow-size);
			margin-block: var(--TOOLTIP-arrow-margin-block, auto);
			margin-inline: var(--TOOLTIP-arrow-margin-inline, auto);

			transform: translate(var(--TOOLTIP-arrow-x, 0%), var(--TOOLTIP-arrow-y, 0%)) rotate(45deg) scale(var(--TOOLTIP-arrow-scale, 0));
		}
	}

	&:is(:hover, :focus-visible, :focus-within) > .tooltip-content::before {
		--TOOLTIP-arrow-scale: 1;
	}
}
